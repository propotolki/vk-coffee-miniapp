{"version":3,"sources":["../../../src/hooks/useEventListener.ts"],"sourcesContent":["import * as React from 'react';\nimport { noop } from '@vkontakte/vkjs';\nimport { canUseDOM } from '../lib/dom';\n\ninterface EventListenerHandle {\n  add: (el: HTMLElement | Document | Window) => void;\n  remove: () => void;\n}\n\nclass EventListener implements EventListenerHandle {\n  callback: (ev: any) => void = noop;\n  options: AddEventListenerOptions | boolean | undefined = undefined;\n  eventType: string;\n  #target: HTMLElement | Document | Window | null = null;\n\n  constructor(\n    type: string,\n    callback: false | null | undefined | ((ev: any) => void),\n    options?: AddEventListenerOptions | boolean,\n  ) {\n    this.options = options;\n    this.eventType = type;\n\n    if (callback) {\n      this.callback = callback;\n    }\n  }\n\n  readonly #listener = (ev: any) => {\n    this.callback(ev);\n  };\n\n  add = (el: HTMLElement | Document | Window) => {\n    if (!canUseDOM) {\n      return;\n    }\n    this.remove();\n    if (!el) {\n      return;\n    }\n\n    el.addEventListener(this.eventType, this.#listener, this.options);\n    this.#target = el;\n  };\n\n  remove = () => {\n    if (!canUseDOM || !this.#target) {\n      return;\n    }\n\n    this.#target.removeEventListener(this.eventType, this.#listener, this.options);\n    this.#target = null;\n  };\n}\n\nexport function useEventListener<K extends keyof GlobalEventHandlersEventMap>(\n  event: K,\n  _cb: false | null | undefined | ((ev: GlobalEventHandlersEventMap[K]) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle;\nexport function useEventListener<E extends Event>(\n  event: string,\n  _cb: false | null | undefined | ((ev: E) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle;\nexport function useEventListener<E extends Event, K extends keyof GlobalEventHandlersEventMap>(\n  event: string | K,\n  _cb: false | null | undefined | ((ev: E) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle {\n  const ref = React.useRef<EventListener | null>(null);\n  if (ref.current === null) {\n    ref.current = new EventListener(event, _cb, _options);\n  } else {\n    ref.current.eventType = event;\n    ref.current.options = _options;\n\n    if (_cb) {\n      ref.current.callback = _cb;\n    }\n  }\n\n  React.useEffect(() => {\n    const detach = ref.current?.remove.bind(ref.current);\n    return detach;\n  }, []);\n\n  return ref.current;\n}\n"],"names":["React","noop","canUseDOM","EventListener","callback","options","undefined","eventType","type","ev","add","el","remove","addEventListener","removeEventListener","useEventListener","event","_cb","_options","ref","useRef","current","useEffect","detach","bind"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,SAAS,QAAQ,gBAAa;AAOvC,MAAMC;IACJC,WAA8BH,KAAK;IACnCI,UAAyDC,UAAU;IACnEC,UAAkB;IAClB,CAAA,MAAO,GAA2C,KAAK;IAEvD,YACEC,IAAY,EACZJ,QAAwD,EACxDC,OAA2C,CAC3C;QACA,IAAI,CAACA,OAAO,GAAGA;QACf,IAAI,CAACE,SAAS,GAAGC;QAEjB,IAAIJ,UAAU;YACZ,IAAI,CAACA,QAAQ,GAAGA;QAClB;IACF;IAES,CAAA,QAAS,GAAG,CAACK;QACpB,IAAI,CAACL,QAAQ,CAACK;IAChB,EAAE;IAEFC,MAAM,CAACC;QACL,IAAI,CAACT,WAAW;YACd;QACF;QACA,IAAI,CAACU,MAAM;QACX,IAAI,CAACD,IAAI;YACP;QACF;QAEAA,GAAGE,gBAAgB,CAAC,IAAI,CAACN,SAAS,EAAE,IAAI,CAAC,CAAA,QAAS,EAAE,IAAI,CAACF,OAAO;QAChE,IAAI,CAAC,CAAA,MAAO,GAAGM;IACjB,EAAE;IAEFC,SAAS;QACP,IAAI,CAACV,aAAa,CAAC,IAAI,CAAC,CAAA,MAAO,EAAE;YAC/B;QACF;QAEA,IAAI,CAAC,CAAA,MAAO,CAACY,mBAAmB,CAAC,IAAI,CAACP,SAAS,EAAE,IAAI,CAAC,CAAA,QAAS,EAAE,IAAI,CAACF,OAAO;QAC7E,IAAI,CAAC,CAAA,MAAO,GAAG;IACjB,EAAE;AACJ;AAYA,OAAO,SAASU,iBACdC,KAAiB,EACjBC,GAAiD,EACjDC,QAAkC;IAElC,MAAMC,MAAMnB,MAAMoB,MAAM,CAAuB;IAC/C,IAAID,IAAIE,OAAO,KAAK,MAAM;QACxBF,IAAIE,OAAO,GAAG,IAAIlB,cAAca,OAAOC,KAAKC;IAC9C,OAAO;QACLC,IAAIE,OAAO,CAACd,SAAS,GAAGS;QACxBG,IAAIE,OAAO,CAAChB,OAAO,GAAGa;QAEtB,IAAID,KAAK;YACPE,IAAIE,OAAO,CAACjB,QAAQ,GAAGa;QACzB;IACF;IAEAjB,MAAMsB,SAAS,CAAC;QACd,MAAMC,SAASJ,IAAIE,OAAO,EAAET,OAAOY,KAAKL,IAAIE,OAAO;QACnD,OAAOE;IACT,GAAG,EAAE;IAEL,OAAOJ,IAAIE,OAAO;AACpB"}