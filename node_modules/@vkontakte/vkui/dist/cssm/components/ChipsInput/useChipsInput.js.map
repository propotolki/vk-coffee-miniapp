{"version":3,"sources":["../../../../src/components/ChipsInput/useChipsInput.ts"],"sourcesContent":["import * as React from 'react';\nimport { escapeRegExp } from '@vkontakte/vkjs';\nimport { useCustomEnsuredControl, useEnsuredControl } from '../../hooks/useEnsuredControl';\nimport { useNativeFormResetListener } from '../../hooks/useNativeFormResetListener';\nimport { simulateReactInput, type SimulateReactInputTargetState } from '../../lib/react';\nimport {\n  DEFAULT_INPUT_VALUE,\n  DEFAULT_VALUE,\n  getNewOptionDataDefault,\n  getOptionLabelDefault,\n  getOptionValueDefault,\n} from '../ChipsInputBase/constants';\nimport { isValueLikeChipOptionObject } from '../ChipsInputBase/helpers';\nimport type {\n  ChipOption,\n  ChipOptionLabel,\n  ChipOptionValue,\n  GetNewOptionData,\n  GetOptionLabel,\n  GetOptionValue,\n  UseChipsInputBaseProps,\n} from '../ChipsInputBase/types';\n\nexport const transformValue = <O extends ChipOption>(\n  value: O[],\n  getOptionValue: GetOptionValue<O>,\n  getOptionLabel: GetOptionLabel<O>,\n): Array<\n  O & {\n    label: ChipOptionLabel;\n    value: ChipOptionValue;\n  }\n> =>\n  value.map((option) => ({\n    ...option,\n    label: getOptionLabel(option),\n    value: getOptionValue(option),\n  }));\n\nfunction getRegExpFromArray(separators: string[]) {\n  const validSeparators = separators.filter((s) => s.length > 0);\n  if (validSeparators.length === 0) {\n    return null;\n  }\n  const escaped = validSeparators.map((s) => escapeRegExp(s));\n  return new RegExp(`(?:${escaped.join('|')})`);\n}\n\nfunction getRegexFromDelimiter(delimiter: string | RegExp | string[]): RegExp | null {\n  if (delimiter instanceof RegExp) {\n    return delimiter;\n  }\n  if (typeof delimiter === 'string') {\n    return new RegExp(escapeRegExp(delimiter));\n  }\n  return getRegExpFromArray(delimiter);\n}\n\ninterface ToggleOption<O extends ChipOption> {\n  (optionsForAdd: Array<O | string>, isNewValue: true): void;\n  (optionsForRemove: Array<O | ChipOptionValue>, isNewValue: false): void;\n}\n\nexport interface UseChipsInputProps<O extends ChipOption = ChipOption>\n  extends UseChipsInputBaseProps<O> {\n  /**\n   * Селектор значения.\n   */\n  getOptionValue?: GetOptionValue<O>;\n  /**\n   * Селектор пользовательского представления.\n   */\n  getOptionLabel?: GetOptionLabel<O>;\n  /**\n   * Функция для создания новой опции.\n   */\n  getNewOptionData?: GetNewOptionData<O>;\n}\n\nexport const useChipsInput = <O extends ChipOption>({\n  // option\n  value: valueProp,\n  defaultValue = DEFAULT_VALUE,\n  onChange,\n  getOptionLabel = getOptionLabelDefault,\n  getOptionValue = getOptionValueDefault,\n  getNewOptionData = getNewOptionDataDefault,\n\n  // input\n  inputValue: inputValueProp,\n  defaultInputValue = DEFAULT_INPUT_VALUE,\n  onInputChange: onInputChangeProp,\n\n  // other\n  disabled,\n  delimiter,\n}: UseChipsInputProps<O>): {\n  value: Array<\n    O & {\n      label: ChipOptionLabel;\n      value: ChipOptionValue;\n    }\n  >;\n  addOption: (newValue: O | string) => void;\n  addOptionFromInput: (inputValue: string) => void;\n  removeOption: (newValue: O | ChipOptionValue) => void;\n  clearOptions: () => void;\n  inputRef: React.RefObject<(HTMLInputElement & SimulateReactInputTargetState) | null>;\n  inputValue: string;\n  onInputChange: (e: React.ChangeEvent<HTMLInputElement>, canCreate?: boolean) => any;\n  clearInput: () => void;\n} => {\n  const [value, setValue] = useCustomEnsuredControl({\n    disabled,\n    value: valueProp ? transformValue(valueProp, getOptionValue, getOptionLabel) : undefined,\n    defaultValue: transformValue(defaultValue, getOptionValue, getOptionLabel),\n    onChange,\n  });\n\n  const inputRef = React.useRef<(HTMLInputElement & SimulateReactInputTargetState) | null>(null);\n  const [inputValue, setInputChange] = useEnsuredControl({\n    disabled,\n    value: inputValueProp,\n    defaultValue: defaultInputValue,\n    onChange: onInputChangeProp,\n  });\n\n  const toggleOption: ToggleOption<O> = React.useCallback(\n    (nextValuesProp: Array<O | ChipOptionValue>, isNewValue: boolean) => {\n      setValue((prevValue) => {\n        const resolvedNextOptionsSet = new Set<ChipOptionValue>();\n        const resolvedNextOptions = nextValuesProp.map((option) => {\n          const isLikeObjectOption = isValueLikeChipOptionObject(option);\n          const resolvedOption = isLikeObjectOption\n            ? getNewOptionData(option.value, option.label)\n            : getNewOptionData(option, typeof option === 'string' ? option : '');\n          resolvedNextOptionsSet.add(resolvedOption.value);\n          return isLikeObjectOption ? { ...option, ...resolvedOption } : resolvedOption;\n        });\n\n        const nextValue = prevValue.filter(\n          (option: O) => !resolvedNextOptionsSet.has(option.value),\n        );\n\n        if (isNewValue) {\n          nextValue.push(...resolvedNextOptions);\n        }\n\n        return nextValue;\n      });\n    },\n    [setValue, getNewOptionData],\n  );\n\n  const clearInput = React.useCallback(() => {\n    /* istanbul ignore if */\n    if (!inputRef.current) {\n      return;\n    }\n    simulateReactInput(inputRef.current, '');\n  }, [inputRef]);\n\n  const addOption = React.useCallback(\n    (newValue: O | string) => toggleOption([newValue], true),\n    [toggleOption],\n  );\n\n  const addOptions = React.useCallback(\n    (newValues: Array<O | string>) => toggleOption(newValues, true),\n    [toggleOption],\n  );\n\n  const removeOption = React.useCallback(\n    (newValue: O | ChipOptionValue) => toggleOption([newValue], false),\n    [toggleOption],\n  );\n\n  const addOptionFromInput = React.useCallback(\n    (inputValue: string) => {\n      const label = inputValue.trim();\n      if (label) {\n        addOption(label);\n        clearInput();\n      }\n    },\n    [addOption, clearInput],\n  );\n\n  const reset = React.useCallback(() => {\n    setValue(defaultValue);\n  }, [defaultValue, setValue]);\n\n  const clearOptions = React.useCallback(() => {\n    setValue(DEFAULT_VALUE);\n    clearInput();\n  }, [clearInput, setValue]);\n\n  const onInputChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>, canCreate = true) => {\n      const newInputValue = e.target.value;\n      const delimiterRegex = delimiter ? getRegexFromDelimiter(delimiter) : null;\n      if (!delimiterRegex || !delimiterRegex.test(newInputValue) || !canCreate) {\n        setInputChange(e);\n        return;\n      }\n      const values = newInputValue\n        .trim()\n        .split(delimiterRegex)\n        .map((v) => v.trim())\n        .filter(Boolean);\n\n      e.target.value = '';\n      e.currentTarget.value = '';\n      setInputChange(e);\n\n      addOptions(values);\n    },\n    [addOptions, delimiter, setInputChange],\n  );\n\n  useNativeFormResetListener(inputRef, reset);\n\n  return {\n    value,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n\n    inputRef,\n    inputValue,\n    onInputChange,\n    clearInput,\n    clearOptions,\n  };\n};\n"],"names":["React","escapeRegExp","useCustomEnsuredControl","useEnsuredControl","useNativeFormResetListener","simulateReactInput","DEFAULT_INPUT_VALUE","DEFAULT_VALUE","getNewOptionDataDefault","getOptionLabelDefault","getOptionValueDefault","isValueLikeChipOptionObject","transformValue","value","getOptionValue","getOptionLabel","map","option","label","getRegExpFromArray","separators","validSeparators","filter","s","length","escaped","RegExp","join","getRegexFromDelimiter","delimiter","useChipsInput","valueProp","defaultValue","onChange","getNewOptionData","inputValue","inputValueProp","defaultInputValue","onInputChange","onInputChangeProp","disabled","setValue","undefined","inputRef","useRef","setInputChange","toggleOption","useCallback","nextValuesProp","isNewValue","prevValue","resolvedNextOptionsSet","Set","resolvedNextOptions","isLikeObjectOption","resolvedOption","add","nextValue","has","push","clearInput","current","addOption","newValue","addOptions","newValues","removeOption","addOptionFromInput","trim","reset","clearOptions","e","canCreate","newInputValue","target","delimiterRegex","test","values","split","v","Boolean","currentTarget"],"mappings":"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"}