{"version":3,"sources":["../../../../src/components/ScreenSpinner/ScreenSpinnerContainer.tsx"],"sourcesContent":["import { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport type { HTMLAttributesWithRootRef } from '../../types';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport { ScreenSpinnerContext } from './context';\nimport { type ScreenSpinnerProps } from './types';\nimport styles from './ScreenSpinner.module.css';\nimport stylesDelay from '../../styles/animationVisibilityDelay.module.css';\n\nconst stateClassNames = {\n  cancelable: styles.stateCancelable,\n  done: styles.stateDone,\n  error: styles.stateError,\n  custom: styles.stateCustom,\n};\n\nconst modeClassNames = {\n  shadow: styles.modeShadow,\n  overlay: styles.modeOverlay,\n};\n\ntype ScreenSpinnerContainerProps = HTMLAttributesWithRootRef<HTMLSpanElement> &\n  Pick<ScreenSpinnerProps, 'state' | 'mode' | 'label' | 'customIcon' | 'visibilityDelay'>;\n\nexport const ScreenSpinnerContainer = ({\n  state = 'loading',\n  mode = 'shadow',\n  customIcon,\n  label,\n  children,\n  visibilityDelay,\n  ...restProps\n}: ScreenSpinnerContainerProps) => {\n  return (\n    <ScreenSpinnerContext.Provider value={{ state, label, customIcon }}>\n      <RootComponent\n        baseClassName={classNames(\n          styles.host,\n          modeClassNames[mode],\n          state !== 'loading' && stateClassNames[state],\n          hasReactNode(label) && styles.hasLabel,\n          visibilityDelay && stylesDelay.visibilityDelay,\n        )}\n        {...restProps}\n      >\n        <div className={styles.iconSlot}>{children}</div>\n        {hasReactNode(label) && (\n          <Footnote className={styles.label} aria-hidden>\n            {label}\n          </Footnote>\n        )}\n      </RootComponent>\n    </ScreenSpinnerContext.Provider>\n  );\n};\n"],"names":["classNames","hasReactNode","RootComponent","Footnote","ScreenSpinnerContext","styles","stylesDelay","stateClassNames","cancelable","stateCancelable","done","stateDone","error","stateError","custom","stateCustom","modeClassNames","shadow","modeShadow","overlay","modeOverlay","ScreenSpinnerContainer","state","mode","customIcon","label","children","visibilityDelay","restProps","Provider","value","baseClassName","host","hasLabel","div","className","iconSlot","aria-hidden"],"mappings":";AAAA,SAASA,UAAU,EAAEC,YAAY,QAAQ,kBAAkB;AAE3D,SAASC,aAAa,QAAQ,oCAAiC;AAC/D,SAASC,QAAQ,QAAQ,qCAAkC;AAC3D,SAASC,oBAAoB,QAAQ,eAAY;AAEjD,OAAOC,YAAY,6BAA6B;AAChD,OAAOC,iBAAiB,mDAAmD;AAE3E,MAAMC,kBAAkB;IACtBC,YAAYH,OAAOI,eAAe;IAClCC,MAAML,OAAOM,SAAS;IACtBC,OAAOP,OAAOQ,UAAU;IACxBC,QAAQT,OAAOU,WAAW;AAC5B;AAEA,MAAMC,iBAAiB;IACrBC,QAAQZ,OAAOa,UAAU;IACzBC,SAASd,OAAOe,WAAW;AAC7B;AAKA,OAAO,MAAMC,yBAAyB,CAAC,EACrCC,QAAQ,SAAS,EACjBC,OAAO,QAAQ,EACfC,UAAU,EACVC,KAAK,EACLC,QAAQ,EACRC,eAAe,EACf,GAAGC,WACyB;IAC5B,qBACE,KAACxB,qBAAqByB,QAAQ;QAACC,OAAO;YAAER;YAAOG;YAAOD;QAAW;kBAC/D,cAAA,MAACtB;YACC6B,eAAe/B,WACbK,OAAO2B,IAAI,EACXhB,cAAc,CAACO,KAAK,EACpBD,UAAU,aAAaf,eAAe,CAACe,MAAM,EAC7CrB,aAAawB,UAAUpB,OAAO4B,QAAQ,EACtCN,mBAAmBrB,YAAYqB,eAAe;YAE/C,GAAGC,SAAS;;8BAEb,KAACM;oBAAIC,WAAW9B,OAAO+B,QAAQ;8BAAGV;;gBACjCzB,aAAawB,wBACZ,KAACtB;oBAASgC,WAAW9B,OAAOoB,KAAK;oBAAEY,aAAW;8BAC3CZ;;;;;AAMb,EAAE"}