{"version":3,"sources":["../../../../src/components/Accordion/AccordionContext.tsx"],"sourcesContent":["import { useContext } from 'react';\nimport * as React from 'react';\nimport { noop } from '@vkontakte/vkjs';\n\nexport interface AccordionContextProps {\n  /**\n   * [a11y] Id для `Accordion.Summary`.\n   */\n  labelId: string;\n  /**\n   * [a11y] Id для свойства `Accordion.Content`.\n   */\n  contentId: string;\n  /**\n   * Состояние аккордеона\n   * `true` - аккордеон развернут, `false` - аккордеон свернут.\n   */\n  expanded: boolean;\n  /**\n   * Нужно ли удалять из DOM контент при сворачивании.\n   */\n  unmountOnCollapsed: boolean;\n  /**\n   * Обработчик изменения состояния аккордеона.\n   */\n  onChange: (e: boolean) => void;\n}\n\nexport const AccordionContext: React.Context<AccordionContextProps> =\n  React.createContext<AccordionContextProps>({\n    labelId: '',\n    contentId: '',\n    expanded: false,\n    unmountOnCollapsed: false,\n    onChange: noop,\n  });\n\nexport const useAccordionContext = (): Pick<AccordionContextProps, 'expanded' | 'onChange'> => {\n  const { expanded, onChange } = useContext(AccordionContext);\n  return React.useMemo(\n    () => ({\n      expanded,\n      onChange,\n    }),\n    [onChange, expanded],\n  );\n};\n"],"names":["useContext","React","noop","AccordionContext","createContext","labelId","contentId","expanded","unmountOnCollapsed","onChange","useAccordionContext","useMemo"],"mappings":"AAAA,SAASA,UAAU,QAAQ,QAAQ;AACnC,YAAYC,WAAW,QAAQ;AAC/B,SAASC,IAAI,QAAQ,kBAAkB;AA0BvC,OAAO,MAAMC,iCACXF,MAAMG,aAAa,CAAwB;IACzCC,SAAS;IACTC,WAAW;IACXC,UAAU;IACVC,oBAAoB;IACpBC,UAAUP;AACZ,GAAG;AAEL,OAAO,MAAMQ,sBAAsB;IACjC,MAAM,EAAEH,QAAQ,EAAEE,QAAQ,EAAE,GAAGT,WAAWG;IAC1C,OAAOF,MAAMU,OAAO,CAClB,IAAO,CAAA;YACLJ;YACAE;QACF,CAAA,GACA;QAACA;QAAUF;KAAS;AAExB,EAAE"}