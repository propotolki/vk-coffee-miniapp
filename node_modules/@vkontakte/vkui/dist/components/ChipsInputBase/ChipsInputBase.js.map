{"version":3,"sources":["../../../src/components/ChipsInputBase/ChipsInputBase.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { isHTMLElement } from '@vkontakte/vkui-floating-ui/utils/dom';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { getHorizontalFocusGoTo, Keys } from '../../lib/accessibility';\nimport {\n  contains as checkTargetIsInputEl,\n  contains,\n  getActiveElementByAnotherElement,\n} from '../../lib/dom';\nimport { FormField } from '../FormField/FormField';\nimport { FormFieldClearButton } from '../FormFieldClearButton/FormFieldClearButton';\nimport { Text } from '../Typography/Text/Text';\nimport { DEFAULT_INPUT_VALUE, DEFAULT_VALUE, renderChipDefault } from './constants';\nimport {\n  getChipOptionIndexByHTMLElement,\n  getChipOptionIndexByValueProp,\n  getChipOptionValueByHTMLElement,\n  getNextChipOptionIndexByNavigateToProp,\n  isInputValueEmpty,\n} from './helpers';\nimport type { ChipOption, ChipOptionValue, ChipsInputBasePrivateProps, NavigateTo } from './types';\nimport styles from './ChipsInputBase.module.css';\n\nconst sizeYClassNames = {\n  none: styles.sizeYNone,\n  compact: styles.sizeYCompact,\n} as const;\n\nexport const ChipsInputBase = <O extends ChipOption>({\n  // FormFieldProps\n  getRootRef,\n  style,\n  className,\n  before,\n  after,\n  status,\n  mode,\n  maxHeight,\n\n  // option\n  value = DEFAULT_VALUE,\n  onAddChipOption,\n  'onRemoveChipOption': onRemoveChipOptionProp,\n  renderChip = renderChipDefault,\n\n  // input\n  getRef,\n  'id': idProp,\n  inputValue = DEFAULT_INPUT_VALUE,\n  placeholder,\n  disabled,\n  readOnly,\n  addOnBlur,\n  onBlur,\n  onInputChange,\n\n  // clear\n  ClearButton = FormFieldClearButton,\n  clearButtonShown,\n  clearButtonTestId,\n  onClear,\n\n  // a11y\n  chipsListLabel = 'Выбранные элементы',\n  'aria-label': ariaLabel = '',\n  ...restProps\n}: ChipsInputBasePrivateProps<O>): React.ReactNode => {\n  const { sizeY = 'none' } = useAdaptivity();\n  const idGenerated = React.useId();\n  const inputRef = useExternRef(getRef);\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const listboxRef = React.useRef<HTMLDivElement>(null);\n\n  const valueLength = value.length;\n  const withPlaceholder = valueLength === 0;\n  const [lastFocusedChipOptionIndex, setLastFocusedChipOptionIndex] = React.useState(0);\n\n  const resetChipOptionFocusToInputEl = (inputEl: HTMLInputElement) => {\n    setLastFocusedChipOptionIndex(0);\n    inputEl.focus();\n  };\n\n  const moveFocusToChipOption = (\n    currentIndex: number,\n    navigateTo: NavigateTo,\n    listboxEl: HTMLElement,\n  ) => {\n    const index = getNextChipOptionIndexByNavigateToProp(currentIndex, navigateTo, valueLength);\n    // eslint-disable-next-line no-restricted-properties\n    const foundEl = listboxEl.querySelector<HTMLElement>(`[data-index=\"${index}\"]`);\n\n    if (foundEl) {\n      setLastFocusedChipOptionIndex(index);\n      foundEl.focus();\n    }\n  };\n\n  const removeChipOption = (o: O | ChipOptionValue, index: number) => {\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (!inputRef.current || !listboxRef.current) {\n      return;\n    }\n\n    if (valueLength > 1) {\n      if (index === valueLength - 1) {\n        moveFocusToChipOption(index, 'prev', listboxRef.current);\n      } else {\n        moveFocusToChipOption(index, 'next', listboxRef.current);\n      }\n    } else {\n      resetChipOptionFocusToInputEl(inputRef.current);\n    }\n\n    onRemoveChipOptionProp(o);\n  };\n\n  const handleListboxKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const targetEl = event.target;\n    /* istanbul ignore if: невозможный кейс (в SSR вызова этой функции не будет) */\n    if (event.defaultPrevented || !listboxRef.current || !isHTMLElement(targetEl)) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ENTER: {\n        if (\n          !readOnly &&\n          checkTargetIsInputEl(targetEl, inputRef.current) &&\n          inputRef.current &&\n          !isInputValueEmpty(inputRef.current)\n        ) {\n          event.preventDefault();\n          onAddChipOption(inputRef.current.value);\n        }\n        break;\n      }\n      case Keys.DELETE:\n      case Keys.BACKSPACE: {\n        if (!readOnly && valueLength > 0) {\n          if (!checkTargetIsInputEl(targetEl, inputRef.current)) {\n            event.preventDefault();\n            removeChipOption(\n              getChipOptionValueByHTMLElement(targetEl),\n              getChipOptionIndexByHTMLElement(targetEl),\n            );\n          } else if (event.key === Keys.BACKSPACE && isInputValueEmpty(inputRef.current)) {\n            event.preventDefault();\n            moveFocusToChipOption(\n              getChipOptionIndexByHTMLElement(targetEl),\n              'last',\n              listboxRef.current,\n            );\n          }\n        }\n        break;\n      }\n      case Keys.HOME:\n      case Keys.END:\n      case Keys.ARROW_UP:\n      case Keys.ARROW_LEFT:\n      case Keys.ARROW_DOWN:\n      case Keys.ARROW_RIGHT: {\n        if (valueLength !== 0 && !checkTargetIsInputEl(targetEl, inputRef.current)) {\n          event.preventDefault();\n          moveFocusToChipOption(\n            getChipOptionIndexByHTMLElement(targetEl),\n            getHorizontalFocusGoTo(event.key),\n            listboxRef.current,\n          );\n        }\n        break;\n      }\n    }\n  };\n\n  const handleInputBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (addOnBlur && !event.defaultPrevented && inputRef.current) {\n      onAddChipOption(inputRef.current.value);\n    }\n  };\n\n  const handleChipRemove = (event: React.MouseEvent, v: ChipOptionValue) => {\n    event.preventDefault();\n    event.stopPropagation();\n    removeChipOption(v, getChipOptionIndexByValueProp(v, value));\n  };\n\n  const handleRootClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (\n      event.defaultPrevented ||\n      contains(event.currentTarget, getActiveElementByAnotherElement(event.currentTarget))\n    ) {\n      return;\n    }\n\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  const handleClear = React.useCallback(() => {\n    if (inputRef.current) {\n      resetChipOptionFocusToInputEl(inputRef.current);\n    }\n    onClear();\n  }, [inputRef, onClear]);\n\n  const clearButton = React.useMemo(() => {\n    if (clearButtonShown) {\n      return (\n        <ClearButton onClick={handleClear} disabled={disabled} data-testid={clearButtonTestId} />\n      );\n    }\n    return undefined;\n  }, [ClearButton, clearButtonShown, clearButtonTestId, disabled, handleClear]);\n\n  const afterItems = React.useMemo(() => {\n    if (clearButton || after) {\n      return (\n        <>\n          {clearButton}\n          {after}\n        </>\n      );\n    }\n    return undefined;\n  }, [after, clearButton]);\n\n  const inputId = idProp || `chips-input-base-generated-id-${idGenerated}`;\n\n  return (\n    <FormField\n      Component=\"div\"\n      getRootRef={getRootRef}\n      // role=\"group\" добавлена, чтобы этот блок можно было найти с помощью стрелочек при использовании NVDA\n      // Если убрать, то aria-label не будет читаться\n      role=\"group\"\n      aria-label={ariaLabel}\n      style={style}\n      disabled={disabled}\n      before={before}\n      after={afterItems}\n      status={status}\n      mode={mode}\n      className={className}\n      maxHeight={maxHeight}\n      onClick={disabled ? undefined : handleRootClick}\n    >\n      <div\n        className={classNames(\n          styles.host,\n          sizeY !== 'regular' && sizeYClassNames[sizeY],\n          withPlaceholder && styles.hasPlaceholder,\n          inputValue && styles.hasInputValue,\n        )}\n        ref={containerRef}\n        onKeyDown={disabled ? undefined : handleListboxKeyDown}\n      >\n        <div\n          className={styles.listBox}\n          // для a11y\n          ref={listboxRef}\n          role=\"listbox\"\n          aria-orientation=\"horizontal\"\n          aria-disabled={disabled}\n          aria-readonly={readOnly}\n          aria-label={chipsListLabel}\n        >\n          {value.map((option, index) => (\n            <React.Fragment key={`${typeof option.value}-${option.value}`}>\n              {renderChip(\n                {\n                  'Component': 'div',\n                  'value': option.value,\n                  'label': option.label,\n                  'disabled': option.disabled || disabled,\n                  'readOnly': option.readOnly || readOnly,\n                  'className': styles.chip,\n                  'onRemove': handleChipRemove,\n                  // чтобы можно было легче найти этот чип в DOM\n                  'data-index': index,\n                  'data-value': option.value,\n                  'data-value-type': typeof option.value,\n                  // для a11y\n                  'tabIndex': lastFocusedChipOptionIndex === index ? 0 : -1,\n                  'role': 'option',\n                  'aria-selected': true,\n                  'aria-posinset': index + 1,\n                  'aria-setsize': valueLength,\n                  'aria-description': 'Для удаления используйте Backspace или Delete',\n                },\n                option,\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n        <Text\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          {...restProps}\n          aria-label={ariaLabel}\n          Component=\"input\"\n          type=\"text\"\n          id={inputId}\n          getRootRef={inputRef}\n          className={styles.el}\n          disabled={disabled}\n          readOnly={readOnly}\n          placeholder={withPlaceholder ? placeholder : undefined}\n          value={inputValue}\n          onChange={onInputChange}\n          onBlur={handleInputBlur}\n        />\n      </div>\n    </FormField>\n  );\n};\n"],"names":["React","classNames","isHTMLElement","useAdaptivity","useExternRef","getHorizontalFocusGoTo","Keys","contains","checkTargetIsInputEl","getActiveElementByAnotherElement","FormField","FormFieldClearButton","Text","DEFAULT_INPUT_VALUE","DEFAULT_VALUE","renderChipDefault","getChipOptionIndexByHTMLElement","getChipOptionIndexByValueProp","getChipOptionValueByHTMLElement","getNextChipOptionIndexByNavigateToProp","isInputValueEmpty","sizeYClassNames","none","compact","ChipsInputBase","getRootRef","style","className","before","after","status","mode","maxHeight","value","onAddChipOption","onRemoveChipOptionProp","renderChip","getRef","idProp","inputValue","placeholder","disabled","readOnly","addOnBlur","onBlur","onInputChange","ClearButton","clearButtonShown","clearButtonTestId","onClear","chipsListLabel","ariaLabel","restProps","sizeY","idGenerated","useId","inputRef","containerRef","useRef","listboxRef","valueLength","length","withPlaceholder","lastFocusedChipOptionIndex","setLastFocusedChipOptionIndex","useState","resetChipOptionFocusToInputEl","inputEl","focus","moveFocusToChipOption","currentIndex","navigateTo","listboxEl","index","foundEl","querySelector","removeChipOption","o","current","handleListboxKeyDown","event","targetEl","target","defaultPrevented","key","ENTER","preventDefault","DELETE","BACKSPACE","HOME","END","ARROW_UP","ARROW_LEFT","ARROW_DOWN","ARROW_RIGHT","handleInputBlur","handleChipRemove","v","stopPropagation","handleRootClick","currentTarget","handleClear","useCallback","clearButton","useMemo","onClick","data-testid","undefined","afterItems","inputId","Component","role","aria-label","div","ref","onKeyDown","aria-orientation","aria-disabled","aria-readonly","map","option","Fragment","label","autoCapitalize","autoComplete","autoCorrect","spellCheck","type","id","onChange"],"mappings":"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"}