{"version":3,"sources":["../../../src/components/MiniInfoCell/MiniInfoCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon16Chevron } from '@vkontakte/icons';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport type { HTMLAttributesWithRootRef } from '../../types';\nimport { Tappable } from '../Tappable/Tappable';\nimport { Paragraph } from '../Typography/Paragraph/Paragraph';\nimport styles from './MiniInfoCell.module.css';\n\nconst stylesMode = {\n  add: styles.modeAdd,\n  accent: styles.modeAccent,\n  more: styles.modeMore,\n};\n\nconst stylesTextWrap = {\n  nowrap: styles.textWrapNowrap,\n  full: styles.textWrapFull,\n  short: styles.textWrapShort,\n};\n\nexport interface MiniInfoCellProps extends HTMLAttributesWithRootRef<HTMLDivElement> {\n  /**\n   * Иконка слева.<br />\n   * Рекомендуется использовать иконки размера 20.\n   */\n  before?: React.ReactNode;\n\n  /**\n   * Содержимое справа.<br />\n   * `<UsersStack size=\"s\" />` или `<Avatar size={24} />`.\n   */\n  after?: React.ReactNode;\n\n  /**\n   * Тип ячейки:\n   *\n   * - `base` – базовая ячейка с серой иконкой и серым текстом.<br />\n   * В компонент можно передать `Link`, чтобы визуально сделать часть текста ссылкой.\n   * - `add` – тип ячейки, который показывает, что взаимодействие с ней должно вызывать действие добавления чего-то.\n   * - `more` – взаимодействие с такой ячейкой должно открывать какую-то подробную информацию.\n   */\n  mode?: 'base' | 'accent' | 'add' | 'more';\n\n  /**\n   * Тип отображения текста:\n   *\n   * - `nowrap` – в одну строку, текст не переносится и обрезается.\n   * - `short` – максимально отображается 3 строки, остальное обрезается.\n   * - `full` – текст отображается полностью. В дизайне это свойство `multiline`.\n   */\n  textWrap?: 'nowrap' | 'short' | 'full';\n\n  /**\n   * Передавать `true`, если предполагается переход при нажатии на ячейку.\n   */\n  chevron?: boolean;\n}\n\n/**\n * @see https://vkui.io/components/mini-info-cell\n */\nexport const MiniInfoCell = ({\n  before,\n  after,\n  children,\n  mode = 'base',\n  textWrap = 'nowrap',\n  chevron = false,\n  ...restProps\n}: MiniInfoCellProps): React.ReactNode => {\n  const cellClasses = classNames(\n    styles.host,\n    stylesTextWrap[textWrap],\n    mode !== 'base' && stylesMode[mode],\n  );\n\n  const cellContent = (\n    <React.Fragment>\n      {hasReactNode(before) && <span className={styles.before}>{before}</span>}\n      <div className={styles.middle}>\n        <Paragraph className={styles.content} weight={mode === 'more' ? '2' : undefined}>\n          {children}\n        </Paragraph>\n        {chevron && <Icon16Chevron />}\n      </div>\n      {hasReactNode(after) && <span className={styles.after}>{after}</span>}\n    </React.Fragment>\n  );\n\n  return (\n    <Tappable {...restProps} baseClassName={cellClasses}>\n      {cellContent}\n    </Tappable>\n  );\n};\n"],"names":["React","Icon16Chevron","classNames","hasReactNode","Tappable","Paragraph","stylesMode","add","accent","more","stylesTextWrap","nowrap","full","short","MiniInfoCell","before","after","children","mode","textWrap","chevron","restProps","cellClasses","cellContent","Fragment","span","className","div","weight","undefined","baseClassName"],"mappings":";;;;AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,UAAU,EAAEC,YAAY,QAAQ,kBAAkB;AAE3D,SAASC,QAAQ,QAAQ,0BAAuB;AAChD,SAASC,SAAS,QAAQ,uCAAoC;AAG9D,MAAMC,aAAa;IACjBC,GAAG;IACHC,MAAM;IACNC,IAAI;AACN;AAEA,MAAMC,iBAAiB;IACrBC,MAAM;IACNC,IAAI;IACJC,KAAK;AACP;AAwCA;;CAEC,GACD,OAAO,MAAMC,eAAe;QAAC,EAC3BC,MAAM,EACNC,KAAK,EACLC,QAAQ,EACRC,OAAO,MAAM,EACbC,WAAW,QAAQ,EACnBC,UAAU,KAAK,EAEG,WADfC;QANHN;QACAC;QACAC;QACAC;QACAC;QACAC;;IAGA,MAAME,cAAcpB,qCAElBQ,cAAc,CAACS,SAAS,EACxBD,SAAS,UAAUZ,UAAU,CAACY,KAAK;IAGrC,MAAMK,4BACJ,MAACvB,MAAMwB,QAAQ;;YACZrB,aAAaY,yBAAW,KAACU;gBAAKC,SAAS;0BAAkBX;;0BAC1D,MAACY;gBAAID,SAAS;;kCACZ,KAACrB;wBAAUqB,SAAS;wBAAkBE,QAAQV,SAAS,SAAS,MAAMW;kCACnEZ;;oBAEFG,yBAAW,KAACnB;;;YAEdE,aAAaa,wBAAU,KAACS;gBAAKC,SAAS;0BAAiBV;;;;IAI5D,qBACE,KAACZ,kDAAaiB;QAAWS,eAAeR;kBACrCC;;AAGP,EAAE"}