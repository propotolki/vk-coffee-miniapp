{"version":3,"sources":["../../../src/components/CarouselBase/CarouselBase.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { useAdaptivityHasPointer } from '../../hooks/useAdaptivityHasPointer';\nimport { useConfigDirection } from '../../hooks/useConfigDirection';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { useMutationObserver } from '../../hooks/useMutationObserver';\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\nimport { useDOM } from '../../lib/dom';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport { warnOnce } from '../../lib/warnOnce';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport { type CustomTouchEvent } from '../Touch/Touch';\nimport { Bullets } from './Bullets';\nimport { CarouselViewPort } from './CarouselViewPort';\nimport { ScrollArrows } from './ScrollArrows';\nimport {\n  ANIMATION_DURATION,\n  CONTROL_ELEMENTS_STATE,\n  SLIDE_THRESHOLD,\n  SLIDES_MANAGER_STATE,\n} from './constants';\nimport {\n  calcMax,\n  calcMin,\n  calculateIndent,\n  getLoopPoints,\n  getTargetIndex,\n  isBigger,\n  isBiggerOrEqual,\n  isLowerOrEqual,\n  revertRtlValue,\n  validateIndent,\n} from './helpers';\nimport { useSlideAnimation } from './hooks';\nimport {\n  type BaseGalleryProps,\n  type ControlElementsState,\n  type GallerySlidesState,\n  type SlidesManagerState,\n} from './types';\nimport styles from './CarouselBase.module.css';\n\nconst warn = warnOnce('Gallery');\n\nexport const CarouselBase = ({\n  bullets = false,\n  getRootRef,\n  children,\n  slideWidth = '100%',\n  slideIndex = 0,\n  dragDisabled = false,\n  resizeSource = 'window',\n  onDragStart,\n  onDragEnd,\n  onChange,\n  onPrevClick,\n  onNextClick,\n  align = 'left',\n  showArrows,\n  getRef,\n  arrowSize,\n  arrowAreaHeight,\n  arrowNextLabel,\n  arrowPrevLabel,\n  slideTestId,\n  bulletTestId,\n  nextArrowTestId,\n  prevArrowTestId,\n  looped = false,\n  ...restProps\n}: BaseGalleryProps): React.ReactNode => {\n  const slidesStore = React.useRef<Record<string, HTMLDivElement | null>>({});\n  const slidesManager = React.useRef<SlidesManagerState>(SLIDES_MANAGER_STATE);\n  const textDirection = useConfigDirection();\n  const isRtl = textDirection === 'rtl';\n\n  const rootRef = useExternRef(getRootRef);\n  const viewportRef = useExternRef(getRef);\n  const layerRef = React.useRef<HTMLDivElement>(null);\n  const animationFrameRef = React.useRef<ReturnType<typeof requestAnimationFrame> | null>(null);\n  const shiftXCurrentRef = React.useRef<number>(0);\n  const shiftXDeltaRef = React.useRef<number>(0);\n  const initialized = React.useRef<boolean>(false);\n  const { addToAnimationQueue, getAnimateFunction, startAnimation } = useSlideAnimation();\n  const isDragging = React.useRef(false);\n\n  const [controlElementsState, setControlElementsState] =\n    React.useState<ControlElementsState>(CONTROL_ELEMENTS_STATE);\n\n  const hasPointer = useAdaptivityHasPointer();\n\n  const isCenterAlign = align === 'center';\n\n  const calculateCanSlideLeft = () => {\n    if (looped) {\n      return !slidesManager.current.isFullyVisible;\n    }\n    const isStartShiftX = isBiggerOrEqual(shiftXCurrentRef.current, 0, isRtl);\n    return !slidesManager.current.isFullyVisible && !isStartShiftX;\n  };\n\n  const calculateCanSlideRight = () => {\n    if (looped) {\n      return !slidesManager.current.isFullyVisible;\n    }\n    return (\n      !slidesManager.current.isFullyVisible &&\n      // we can't move right when gallery layer fully scrolled right, if gallery aligned by left side\n      ((align === 'left' &&\n        slidesManager.current.containerWidth - revertRtlValue(shiftXCurrentRef.current, isRtl) <\n          (slidesManager.current.layerWidth ?? 0)) ||\n        // otherwise we need to check current slide index (align = right or align = center)\n        (align !== 'left' && slideIndex < slidesManager.current.slides.length - 1))\n    );\n  };\n\n  const transformCssStyles = (shiftX: number, animation = false) => {\n    shiftX = Math.round(shiftX);\n    if (looped) {\n      slidesManager.current.loopPoints.forEach((loopPoint) => {\n        const { target, index } = loopPoint;\n        const slide = slidesStore.current[index];\n        if (slide) {\n          slide.style.transform = `translate3d(${target(shiftX)}px, 0, 0)`;\n        }\n      });\n    } else {\n      Object.values(slidesStore.current).forEach((slide) => {\n        if (slide) {\n          slide.style.transform = '';\n        }\n      });\n    }\n\n    if (layerRef.current) {\n      const indent =\n        isDragging.current && !looped\n          ? validateIndent(\n              slidesManager.current,\n              shiftXCurrentRef.current + shiftXDeltaRef.current,\n              isRtl,\n              false,\n            )\n          : shiftX;\n\n      layerRef.current.style.transform = `translate3d(${indent}px, 0, 0)`;\n      layerRef.current.style.transition = animation\n        ? `transform ${ANIMATION_DURATION}ms cubic-bezier(.1, 0, .25, 1)`\n        : '';\n    }\n  };\n\n  const checkShiftOutOfBoundsFromStart = (shiftX: number, snaps: number[]) =>\n    isBigger(shiftX, snaps[0], isRtl);\n\n  const checkShiftOutOfBoundsFromEnd = (shiftX: number, slides: GallerySlidesState[]) => {\n    /**\n     * Поскольку при `align=\"center\"` слайды сдвинуты, прежде чем рассчитать крайнюю правую точку,\n     * нужно вычесть сдвиг слайдов.\n     */\n    const firstSlideShift =\n      align === 'center'\n        ? (slidesManager.current.containerWidth - slidesManager.current.slides[0].width) / 2\n        : 0;\n\n    const lastPoint =\n      slides[slides.length - 1].width + slides[slides.length - 1].coordX - firstSlideShift;\n    return isRtl ? shiftX >= lastPoint : shiftX <= -lastPoint;\n  };\n\n  const requestTransform = (shiftX: number, animation = false) => {\n    const { snaps, contentSize, slides } = slidesManager.current;\n\n    if (animationFrameRef.current !== null) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      /**\n       * Для бесконечной галереи проверяем, что при dnd мы прокрутили левее, чем первый слайд,\n       * чтобы сбросить `shiftXCurrentRef`.\n       */\n      if (looped && checkShiftOutOfBoundsFromStart(shiftX, snaps)) {\n        const firstSnap = revertRtlValue(snaps[0], isRtl);\n        shiftXCurrentRef.current = revertRtlValue(-contentSize + firstSnap, isRtl);\n        shiftX = shiftXCurrentRef.current + shiftXDeltaRef.current;\n      }\n\n      /**\n       * Для бесконечной галереи проверяем, что при dnd мы прокрутили правее, чем последний слайд,\n       * чтобы правильно пересчитать `shiftXCurrentRef`.\n       */\n      if (looped && checkShiftOutOfBoundsFromEnd(shiftX, slides)) {\n        shiftXCurrentRef.current = Math.abs(shiftXDeltaRef.current) + snaps[0];\n      }\n      transformCssStyles(shiftX, animation);\n    });\n  };\n\n  const initializeSlides = () => {\n    if (!rootRef.current || !viewportRef.current || !layerRef.current) {\n      return;\n    }\n    const layerOffsetWidth = layerRef.current.offsetWidth;\n\n    const calcRtlCoord = (element: HTMLDivElement) => {\n      const offsetLeft = element.offsetLeft;\n      const offsetWidth = element.offsetWidth;\n      return layerOffsetWidth - offsetLeft - offsetWidth;\n    };\n\n    let localSlides =\n      React.Children.map(children, (_item, i): GallerySlidesState => {\n        const elem = slidesStore.current[i];\n        if (!elem) {\n          return { coordX: 0, width: 0 };\n        }\n        const coordX = isRtl ? calcRtlCoord(elem) : elem.offsetLeft;\n        return { coordX, width: elem.offsetWidth };\n      }) || [];\n\n    if (localSlides.length === 0) {\n      initialized.current = false;\n      return;\n    }\n\n    const containerWidth = rootRef.current.offsetWidth;\n    const viewportOffsetWidth = viewportRef.current.offsetWidth;\n    const layerWidth = localSlides.reduce((val, slide) => slide.width + val, 0);\n\n    if (process.env.NODE_ENV === 'development' && looped) {\n      let remainingWidth = containerWidth;\n      let slideIndex = 0;\n\n      while (remainingWidth > 0 && slideIndex < localSlides.length) {\n        remainingWidth -= localSlides[slideIndex].width;\n        slideIndex++;\n      }\n      if (remainingWidth <= 0 && slideIndex === localSlides.length) {\n        warn(\n          'Ширины слайдов недостаточно для корректной работы свойства \"looped\". Пожалуйста, сделайте её больше.',\n        );\n      }\n    }\n\n    const currentSlideOffsetOnCenterAlignment =\n      (containerWidth - (localSlides[slideIndex]?.width ?? 0)) / 2;\n    const isFullyVisible =\n      align === 'center'\n        ? layerWidth + currentSlideOffsetOnCenterAlignment <= containerWidth\n        : layerWidth <= containerWidth;\n\n    const onlyOneSlide = localSlides.length === 1;\n\n    slidesManager.current = {\n      ...slidesManager.current,\n      layerWidth,\n      containerWidth,\n      viewportOffsetWidth,\n      slides: localSlides,\n      isFullyVisible,\n      max:\n        looped || onlyOneSlide\n          ? null\n          : calcMax({\n              slides: localSlides,\n              containerWidth,\n              isCenterAlign,\n              isRtl,\n            }),\n      min:\n        looped || onlyOneSlide\n          ? null\n          : calcMin({\n              containerWidth,\n              layerWidth,\n              slides: localSlides,\n              viewportOffsetWidth,\n              isFullyVisible,\n              align,\n              isRtl,\n            }),\n    };\n    const snaps = localSlides.map((_, index) =>\n      calculateIndent({\n        targetIndex: index,\n        slidesManager: slidesManager.current,\n        isCenter: isCenterAlign,\n        looped,\n        isRtl,\n      }),\n    );\n\n    let contentSize = Math.abs(snaps[snaps.length - 1]) + localSlides[localSlides.length - 1].width;\n    if (align === 'center') {\n      contentSize += revertRtlValue(snaps[0], isRtl);\n    }\n\n    slidesManager.current.snaps = snaps;\n    slidesManager.current.contentSize = contentSize;\n    // Если галерея не зациклена и слайд всего один, то рассчитывать loopPoints тоже не надо\n    if (looped && !onlyOneSlide && !isFullyVisible) {\n      slidesManager.current.loopPoints = getLoopPoints(\n        slidesManager.current,\n        containerWidth,\n        isRtl,\n      );\n    }\n\n    shiftXCurrentRef.current = snaps[slideIndex];\n    initialized.current = true;\n\n    setControlElementsState({\n      canSlideLeft: calculateCanSlideLeft(),\n      canSlideRight: calculateCanSlideRight(),\n      isDraggable: !(dragDisabled || slidesManager.current.isFullyVisible),\n    });\n    requestTransform(shiftXCurrentRef.current);\n  };\n\n  const onResize = () => {\n    if (initialized.current) {\n      initializeSlides();\n    }\n  };\n  const { window } = useDOM();\n  useResizeObserver(resizeSource === 'element' ? rootRef : window, onResize);\n\n  const loopedSlideChangePerform = () => {\n    const { snaps, slides } = slidesManager.current;\n    const indent = snaps[slideIndex];\n    let startPoint = shiftXCurrentRef.current;\n\n    const fromLastToFirst = isLowerOrEqual(\n      shiftXCurrentRef.current,\n      snaps[snaps.length - 1],\n      isRtl,\n    );\n    /**\n     * Переключаемся с последнего элемента на первый\n     * Для корректной анимации мы прокручиваем последний слайд на всю длину (shiftX) \"вперед\"\n     * В конце анимации при отрисовке следующего кадра задаем всем слайдам начальные значения.\n     */\n    if (indent === snaps[0] && fromLastToFirst) {\n      const endEdge = revertRtlValue(\n        Math.abs(snaps[snaps.length - 1]) + slides[slides.length - 1].width,\n        isRtl,\n      );\n      const distance = endEdge + startPoint;\n      addToAnimationQueue(\n        getAnimateFunction((progress) => {\n          const shiftX = startPoint + progress * distance * -1;\n\n          transformCssStyles(shiftX);\n\n          if (shiftX <= snaps[snaps.length - 1] - slides[slides.length - 1].width) {\n            requestAnimationFrame(() => {\n              shiftXCurrentRef.current = indent;\n              transformCssStyles(snaps[0]);\n            });\n          }\n        }),\n      );\n      /**\n       * Переключаемся с первого слайда на последний\n       * Для корректной анимации сначала задаем первым видимым слайдам смещение\n       * В следующем кадре начинаем анимация прокрутки \"назад\".\n       */\n    } else if (indent === snaps[snaps.length - 1] && shiftXCurrentRef.current === snaps[0]) {\n      startPoint = indent - revertRtlValue(slides[slides.length - 1].width, isRtl);\n\n      addToAnimationQueue(() => {\n        requestAnimationFrame(() => {\n          const shiftX = indent - revertRtlValue(slides[slides.length - 1].width, isRtl);\n          transformCssStyles(shiftX);\n\n          getAnimateFunction((progress) => {\n            const diff = revertRtlValue(progress * slides[slides.length - 1].width, isRtl);\n            transformCssStyles(startPoint + diff);\n          })();\n        });\n      });\n      /**\n       * Если не обработаны `corner`-кейсы выше, то просто проигрываем анимацию смещения.\n       */\n    } else {\n      addToAnimationQueue(() => {\n        const distance = Math.abs(indent - startPoint);\n        let direction = startPoint <= indent ? 1 : -1;\n\n        getAnimateFunction((progress) => {\n          const shiftX = startPoint + progress * distance * direction;\n          transformCssStyles(shiftX);\n        })();\n      });\n    }\n  };\n\n  const simpleSlideChangePerform = () => {\n    const { snaps } = slidesManager.current;\n    requestTransform(snaps[slideIndex], true);\n  };\n\n  useIsomorphicLayoutEffect(\n    function performSlideChange() {\n      if (!initialized.current) {\n        return;\n      }\n      const { snaps } = slidesManager.current;\n      const indent = snaps[slideIndex];\n\n      if (looped) {\n        loopedSlideChangePerform();\n      } else {\n        simpleSlideChangePerform();\n      }\n\n      startAnimation();\n\n      shiftXCurrentRef.current = indent;\n\n      setControlElementsState((v) => ({\n        ...v,\n        canSlideLeft: calculateCanSlideLeft(),\n        canSlideRight: calculateCanSlideRight(),\n      }));\n    },\n    [slideIndex],\n  );\n\n  useIsomorphicLayoutEffect(\n    function updateIsDraggable() {\n      setControlElementsState((v) => ({\n        ...v,\n        isDraggable: !(dragDisabled || slidesManager.current.isFullyVisible),\n      }));\n    },\n    [dragDisabled],\n  );\n\n  useMutationObserver(layerRef, initializeSlides);\n\n  useIsomorphicLayoutEffect(initializeSlides, [align, slideWidth, looped, isRtl]);\n\n  const calculateMinDeltaXToSlide = () => {\n    return slidesManager.current.slides[slideIndex].width * SLIDE_THRESHOLD;\n  };\n\n  const slideLeft = (event: React.MouseEvent) => {\n    if (slideIndex > 0) {\n      shiftXCurrentRef.current += revertRtlValue(calculateMinDeltaXToSlide(), isRtl);\n    }\n    onChange?.(\n      (slideIndex - 1 + slidesManager.current.slides.length) % slidesManager.current.slides.length,\n    );\n    onPrevClick?.(event);\n  };\n\n  const slideRight = (event: React.MouseEvent) => {\n    if (slideIndex < slidesManager.current.slides.length - 1) {\n      shiftXCurrentRef.current -= revertRtlValue(calculateMinDeltaXToSlide(), isRtl);\n    }\n    onChange?.((slideIndex + 1) % slidesManager.current.slides.length);\n    onNextClick?.(event);\n  };\n\n  const onStart = (e: CustomTouchEvent) => {\n    e.originalEvent.stopPropagation();\n    if (controlElementsState.isDraggable) {\n      onDragStart?.(e);\n      shiftXCurrentRef.current = slidesManager.current.snaps[slideIndex];\n      shiftXDeltaRef.current = 0;\n    }\n  };\n\n  const onMoveX = (e: CustomTouchEvent) => {\n    if (controlElementsState.isDraggable) {\n      e.originalEvent.preventDefault();\n\n      if (e.isSlideX) {\n        isDragging.current = true;\n        if (shiftXDeltaRef.current !== e.shiftX) {\n          shiftXDeltaRef.current = e.shiftX;\n          requestTransform(shiftXCurrentRef.current + shiftXDeltaRef.current);\n        }\n      }\n    }\n  };\n\n  const onEnd = (e: CustomTouchEvent) => {\n    if (controlElementsState.isDraggable) {\n      isDragging.current = false;\n      let targetIndex = slideIndex;\n      if (e.isSlide) {\n        targetIndex = getTargetIndex({\n          slides: slidesManager.current.slides,\n          slideIndex,\n          currentShiftX: shiftXCurrentRef.current,\n          currentShiftXDelta: shiftXDeltaRef.current,\n          max: slidesManager.current.max,\n          looped,\n          isRtl,\n        });\n      }\n      onDragEnd?.(e, targetIndex);\n\n      if (targetIndex !== slideIndex) {\n        shiftXCurrentRef.current = shiftXCurrentRef.current + shiftXDeltaRef.current;\n        onChange?.(targetIndex);\n      } else {\n        const initialShiftX = slidesManager.current.snaps[targetIndex];\n        requestTransform(initialShiftX, true);\n      }\n    }\n  };\n\n  const setSlideRef = (slideRef: HTMLDivElement | null, slideIndex: number) => {\n    slidesStore.current[slideIndex] = slideRef;\n  };\n\n  const { isDraggable, canSlideRight, canSlideLeft } = controlElementsState;\n\n  return (\n    <RootComponent\n      {...restProps}\n      baseClassName={classNames(\n        styles.host,\n        slideWidth === 'custom' && styles.customWidth,\n        isDraggable && styles.draggable,\n      )}\n      getRootRef={rootRef}\n    >\n      <CarouselViewPort\n        slideWidth={slideWidth}\n        slideTestId={slideTestId}\n        onStart={onStart}\n        onMoveX={onMoveX}\n        onEnd={onEnd}\n        getRootRef={viewportRef}\n        layerRef={layerRef}\n        setSlideRef={setSlideRef}\n      >\n        {children}\n      </CarouselViewPort>\n\n      {bullets && (\n        <Bullets\n          bullets={bullets}\n          slideIndex={slideIndex}\n          count={React.Children.count(children)}\n          bulletTestId={bulletTestId}\n        />\n      )}\n      <ScrollArrows\n        hasPointer={hasPointer}\n        canSlideLeft={canSlideLeft}\n        canSlideRight={canSlideRight}\n        onSlideRight={slideRight}\n        onSlideLeft={slideLeft}\n        showArrows={showArrows}\n        arrowSize={arrowSize}\n        arrowAreaHeight={arrowAreaHeight}\n        arrowPrevLabel={arrowPrevLabel}\n        arrowNextLabel={arrowNextLabel}\n        prevArrowTestId={prevArrowTestId}\n        nextArrowTestId={nextArrowTestId}\n      />\n    </RootComponent>\n  );\n};\n"],"names":["React","classNames","useAdaptivityHasPointer","useConfigDirection","useExternRef","useMutationObserver","useResizeObserver","useDOM","useIsomorphicLayoutEffect","warnOnce","RootComponent","Bullets","CarouselViewPort","ScrollArrows","ANIMATION_DURATION","CONTROL_ELEMENTS_STATE","SLIDE_THRESHOLD","SLIDES_MANAGER_STATE","calcMax","calcMin","calculateIndent","getLoopPoints","getTargetIndex","isBigger","isBiggerOrEqual","isLowerOrEqual","revertRtlValue","validateIndent","useSlideAnimation","warn","CarouselBase","bullets","getRootRef","children","slideWidth","slideIndex","dragDisabled","resizeSource","onDragStart","onDragEnd","onChange","onPrevClick","onNextClick","align","showArrows","getRef","arrowSize","arrowAreaHeight","arrowNextLabel","arrowPrevLabel","slideTestId","bulletTestId","nextArrowTestId","prevArrowTestId","looped","restProps","slidesStore","useRef","slidesManager","textDirection","isRtl","rootRef","viewportRef","layerRef","animationFrameRef","shiftXCurrentRef","shiftXDeltaRef","initialized","addToAnimationQueue","getAnimateFunction","startAnimation","isDragging","controlElementsState","setControlElementsState","useState","hasPointer","isCenterAlign","calculateCanSlideLeft","current","isFullyVisible","isStartShiftX","calculateCanSlideRight","containerWidth","layerWidth","slides","length","transformCssStyles","shiftX","animation","Math","round","loopPoints","forEach","loopPoint","target","index","slide","style","transform","Object","values","indent","transition","checkShiftOutOfBoundsFromStart","snaps","checkShiftOutOfBoundsFromEnd","firstSlideShift","width","lastPoint","coordX","requestTransform","contentSize","cancelAnimationFrame","requestAnimationFrame","firstSnap","abs","initializeSlides","localSlides","layerOffsetWidth","offsetWidth","calcRtlCoord","element","offsetLeft","Children","map","_item","i","elem","viewportOffsetWidth","reduce","val","process","env","NODE_ENV","remainingWidth","currentSlideOffsetOnCenterAlignment","onlyOneSlide","max","min","_","targetIndex","isCenter","canSlideLeft","canSlideRight","isDraggable","onResize","window","loopedSlideChangePerform","startPoint","fromLastToFirst","endEdge","distance","progress","diff","direction","simpleSlideChangePerform","performSlideChange","v","updateIsDraggable","calculateMinDeltaXToSlide","slideLeft","event","slideRight","onStart","e","originalEvent","stopPropagation","onMoveX","preventDefault","isSlideX","onEnd","isSlide","currentShiftX","currentShiftXDelta","initialShiftX","setSlideRef","slideRef","baseClassName","count","onSlideRight","onSlideLeft"],"mappings":"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"}