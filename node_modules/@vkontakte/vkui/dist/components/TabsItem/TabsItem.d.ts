import * as React from 'react';
import type { AnchorHTMLAttributesOnly, HTMLAttributesWithRootRef } from '../../types';
import { type TappableOmitProps } from '../Tappable/Tappable';
export interface TabsItemProps extends HTMLAttributesWithRootRef<HTMLElement>, AnchorHTMLAttributesOnly, Pick<TappableOmitProps, 'Component' | 'activeMode' | 'hoverMode' | 'hovered' | 'activated' | 'hasActive' | 'hasHover' | 'focusVisibleMode'> {
    /**
     * Добавляет иконку слева.
     *
     * - Для `mode="default"` используйте иконки размером 24.
     * - Для всех остальных `mode` используйте иконки размером 20.
     */
    before?: React.ReactNode;
    /**
     * Добавляет элемент слева от `after`.
     *
     * - `React.ReactElement` – либо [`Badge`](https://vkui.io/components/badge) с параметром `mode="prominent"`.
     *   Либо [`Counter`](https://vkui.io/components/counter) с параметрами `mode="prominent" size="s"`.
     * - `number` – для показа текстового блока с переданным числом.
     */
    status?: React.ReactElement | number;
    /**
     * Добавляет иконку справа.
     *
     * Например, `<Icon16Dropdown />`.
     */
    after?: React.ReactNode;
    /**
     * Флаг для отображения выбранного состояния.
     */
    selected?: boolean;
    /**
     * Блокировка взаимодействия с компонентом.
     */
    disabled?: boolean;
}
/**
 * @see https://vkui.io/components/tabs#tabs-item
 */
export declare const TabsItem: ({ before, children, status, after, selected: selectedProp, role, tabIndex: tabIndexProp, getRootRef, hoverMode, activeMode, hasActive, focusVisibleMode, id, onClick, ...restProps }: TabsItemProps) => React.ReactNode;
//# sourceMappingURL=TabsItem.d.ts.map