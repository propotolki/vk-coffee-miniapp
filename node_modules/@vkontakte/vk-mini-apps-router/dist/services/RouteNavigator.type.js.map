{"version":3,"file":"RouteNavigator.type.js","sourceRoot":"","sources":["../../src/services/RouteNavigator.type.ts"],"names":[],"mappings":"","sourcesContent":["import { Page, PageWithParams } from '../page-types/common';\nimport { BlockerFunction, Params } from '@remix-run/router';\n\nexport type NavigationState = Record<string, unknown> | null;\n\nexport interface NavigationOptions {\n  keepSearchParams?: boolean;\n  state?: NavigationState;\n}\n\ntype NavigationPath = {\n  pathname?: string;\n  search?: URLSearchParams | Record<string, string> | string;\n  hash?: string;\n};\n\ntype NavigationTo = string | Partial<NavigationPath>;\n\nexport interface ExtendedPathWithParams<T extends string>\n  extends Partial<Omit<NavigationPath, 'pathname'>> {\n  pathname: PageWithParams<T>;\n}\n\nexport interface ExtendedPath extends Partial<Omit<NavigationPath, 'pathname'>> {\n  pathname: Page;\n}\n\nexport interface RouteNavigator {\n  push<T extends string>(\n    to: NavigationTo | PageWithParams<T> | ExtendedPathWithParams<T>,\n    params: Params<T>,\n    options?: NavigationOptions,\n  ): Promise<void>;\n  push(to: NavigationTo | Page | ExtendedPath, options?: NavigationOptions): Promise<void>;\n\n  replace<T extends string>(\n    to: NavigationTo | PageWithParams<T>,\n    params: Params<T>,\n    options?: NavigationOptions,\n  ): Promise<void>;\n  replace(to: NavigationTo | Page, options?: NavigationOptions): Promise<void>;\n\n  back(to?: number): Promise<void>;\n\n  backToFirst(): Promise<void>;\n\n  go(to: number): Promise<void>;\n\n  showModal(id: string, options?: { state?: NavigationState }): Promise<void>;\n\n  block(onLeave: BlockerFunction): () => void;\n\n  /**\n   * Закрыть модальное окно, открытое методом showModal или навигацией (push/replace/back).\n   *\n   * @param pushPanel Установите значение в true, если хотите выполнить PUSH навигацию.\n   * В случае, если модальное окно было открыто через навигацию, можно закрыть окно шагом назад\n   * или навигацией вперед на родительскую панель.<br>\n   * По умолчанию false.\n   *\n   * @param options - Необязательный параметр для дополнительных настроек навигации.\n   *\n   * @param options.replace - Если true, текущее модальное окно будет закрыто с заменой\n   * текущей записи истории на родительскую панель. По умолчанию false, что означает закрытие модального окна\n   * с добавлением новой записи в историю или возвратом на один шаг назад.\n   */\n  hideModal(pushPanel?: boolean, options?: { replace: boolean }): Promise<void>;\n\n  showPopout(popout: JSX.Element): Promise<void>;\n\n  hidePopout(): Promise<void>;\n\n  runSync(actions: VoidFunction[]): Promise<void>;\n}\n\nexport type NavigationTarget =\n  | NavigationTo\n  | PageWithParams<string>\n  | Page\n  | ExtendedPathWithParams<string>\n  | ExtendedPath;\n"]}