{"version":3,"file":"useParams.js","sourceRoot":"","sources":["../../src/hooks/useParams.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAE3C,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AASxD;;;GAGG;AACH,SAAS,qBAAqB,CAC5B,EAAqB,EACrB,cAAgD,EAChD,KAAgC;IAEhC,IAAI,CAAC,EAAE,IAAI,CAAC,cAAc,IAAI,CAAC,KAAK,EAAE;QACpC,OAAO,SAAS,CAAC;KAClB;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAoB,CAAC;IAClD,MAAM,0BAA0B,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;QACtD,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,cAAc,CAAC,GAAG,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,OAAO,0BAA0B,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;AACxE,CAAC;AAED,MAAM,UAAU,SAAS,CAA4B,EAAU;IAC7D,MAAM,CAAC,YAAY,CAAC,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC;IACzD,SAAS,CACP,YAAY,EACZ,qGAAqG,CACtG,CAAC;IAEF,MAAM,cAAc,GAAG,iBAAiB,EAAE,CAAC;IAC3C,MAAM,YAAY,GAAG,cAAc,CAAC,UAAU,EAAE,CAAC;IACjD,MAAM,eAAe,GAAG,cAAc,CAAC,kBAAkB,EAAE,CAAC;IAC5D,MAAM,cAAc,GAAG,eAAe,CAAC,CAAC,CAAC,YAAY,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAEvF,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC;IAEnD,OAAO,qBAAqB,CAAI,EAAE,EAAE,cAAc,EAAE,KAAsB,CAAC,IAAI,MAAM,CAAC;AACxF,CAAC","sourcesContent":["import { RouteContext } from '../contexts';\nimport { Params } from '@remix-run/router';\nimport { useThrottledContext } from './useThrottledContext';\nimport { ModalWithRoot } from '../type';\nimport { invariant } from '../utils/utils';\nimport { useHistoryManager } from './useHistoryManager';\nimport { ViewNavigationRecord } from '../services';\n\ntype RequireOnlyOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n  { [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>> }[Keys];\n\ntype AnimatedParts = Pick<ModalWithRoot, 'tab' | 'panel' | 'modal'>;\ntype NavId = RequireOnlyOne<AnimatedParts>;\n\n/**\n * Checks if the provided `id` matches the previous history record and differs from the current route.\n * Returns the previous record's params if conditions are met, ensuring correct swipe-back animation and proper modal closing.\n */\nfunction getActualRecordParams<T extends string>(\n  id: NavId | undefined,\n  previousRecord: ViewNavigationRecord | undefined,\n  route: ModalWithRoot | undefined,\n): Params<T> | undefined {\n  if (!id || !previousRecord || !route) {\n    return undefined;\n  }\n\n  const idKeys = Object.keys(id) as (keyof NavId)[];\n  const currentRouteDoesNotMatchId = !idKeys.some((key) => {\n    return route[key] === id[key] || id[key] !== previousRecord[key];\n  });\n\n  return currentRouteDoesNotMatchId ? previousRecord.params : undefined;\n}\n\nexport function useParams<T extends string = string>(id?: NavId): Params<T> | undefined {\n  const [routeContext] = useThrottledContext(RouteContext);\n  invariant(\n    routeContext,\n    'You can not use useParams hook outside of RouteContext. Make sure calling it inside RouterProvider.',\n  );\n\n  const historyManager = useHistoryManager();\n  const historyStack = historyManager.getHistory();\n  const currentPosition = historyManager.getCurrentPosition();\n  const previousRecord = currentPosition ? historyStack[currentPosition - 1] : undefined;\n\n  const { route, params } = routeContext.match ?? {};\n\n  return getActualRecordParams<T>(id, previousRecord, route as ModalWithRoot) ?? params;\n}\n"]}