import { RouteContext } from '../contexts';
import { useThrottledContext } from './useThrottledContext';
import { invariant } from '../utils/utils';
import { useHistoryManager } from './useHistoryManager';
/**
 * Checks if the provided `id` matches the previous history record and differs from the current route.
 * Returns the previous record's params if conditions are met, ensuring correct swipe-back animation and proper modal closing.
 */
function getActualRecordParams(id, previousRecord, route) {
    if (!id || !previousRecord || !route) {
        return undefined;
    }
    const idKeys = Object.keys(id);
    const currentRouteDoesNotMatchId = !idKeys.some((key) => {
        return route[key] === id[key] || id[key] !== previousRecord[key];
    });
    return currentRouteDoesNotMatchId ? previousRecord.params : undefined;
}
export function useParams(id) {
    const [routeContext] = useThrottledContext(RouteContext);
    invariant(routeContext, 'You can not use useParams hook outside of RouteContext. Make sure calling it inside RouterProvider.');
    const historyManager = useHistoryManager();
    const historyStack = historyManager.getHistory();
    const currentPosition = historyManager.getCurrentPosition();
    const previousRecord = currentPosition ? historyStack[currentPosition - 1] : undefined;
    const { route, params } = routeContext.match ?? {};
    return getActualRecordParams(id, previousRecord, route) ?? params;
}
//# sourceMappingURL=useParams.js.map